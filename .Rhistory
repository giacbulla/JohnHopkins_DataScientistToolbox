knitr::opts_chunk$set(echo = TRUE)
install.packages(c("httr", "jsonlite", "dplyr"))
library(httr)
library(jsonlite)
library(dplyr)
key <- "AIzaSyBerKodKhkdaQ_udO--SBLEmwmCFXDuqa4"
channel_id <- ""  # I can't find Danny Duncan's Channel ID?
user_id <- "dannyduncan69"  # Danny Duncan Username
base <- "https://www.googleapis.com/youtube/v3/"
paste(paste0("key=", key),
paste0("id=", channel_id),
"part=snippet,contentDetails,statistics",
sep = "&")
api_params <-
paste(paste0("key=", key),
paste0("id=", channel_id),
"part=snippet,contentDetails,statistics",
sep = "&")
paste0(base, "channels", "?", api_params)
?paste0
api_call <- paste0(base, "channels", "?", api_params)
GET(api_call)
api_result <- GET(api_call)
content(api_result, "text", encoding="UTF-8")
json_result <- content(api_result, "text", encoding="UTF-8")
# Process the raw data into a data frame
channel.json <- fromJSON(json_result, flatten = T)
fromJSON(json_result, flatten = T)
channel.df <- as.data.frame(channel.json)
as.data.frame(channel.json)
key <- "AIzaSyBerKodKhkdaQ_udO--SBLEmwmCFXDuqa4"
channel_id <- "UCxX9wt5FWQUAAz4UrysqK9A"  # CS Dojo Channel ID
user_id <- "numberphile"  # Numberphile Username
base <- "https://www.googleapis.com/youtube/v3/"
# Construct the API call
api_params <-
paste(paste0("key=", key),
paste0("id=", channel_id),
"part=snippet,contentDetails,statistics",
sep = "&")
api_call <- paste0(base, "channels", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
# Process the raw data into a data frame
channel.json <- fromJSON(json_result, flatten = T)
channel.df <- as.data.frame(channel.json)
as.data.frame(channel.json)
playlist_id <- channel.df$contentDetails.relatedPlaylists.uploads
playlist_id <- channel.df$contentDetails.relatedPlaylists.uploads
# temporary variables
nextPageToken <- ""
upload.df <- NULL
pageInfo <- NULL
# Loop through the playlist while there is still a next page
while (!is.null(nextPageToken)) {
# Construct the API call
api_params <-
paste(paste0("key=", key),
paste0("playlistId=", playlist_id),
"part=snippet,contentDetails,status",
"maxResults=50",
sep = "&")
# Add the page token for page 2 onwards
if (nextPageToken != "") {
api_params <- paste0(api_params,
"&pageToken=",nextPageToken)
}
api_call <- paste0(base, "playlistItems", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
upload.json <- fromJSON(json_result, flatten = T)
nextPageToken <- upload.json$nextPageToken
pageInfo <- upload.json$pageInfo
curr.df <- as.data.frame(upload.json$items)
if (is.null(upload.df)) {
upload.df <- curr.df
} else {
upload.df <- bind_rows(upload.df, curr.df)
}
}
upload.df
knitr::opts_chunk$set(echo = TRUE)
install.packages(c("httr", "jsonlite", "dplyr"))
library(httr)
library(jsonlite)
library(dplyr)
key <- "AIzaSyBerKodKhkdaQ_udO--SBLEmwmCFXDuqa4"
channel_id <- "UCxX9wt5FWQUAAz4UrysqK9A"  # CS Dojo Channel ID
user_id <- "numberphile"  # Numberphile Username
base <- "https://www.googleapis.com/youtube/v3/"
# Construct the API call
api_params <-
paste(paste0("key=", key),
paste0("id=", channel_id),
"part=snippet,contentDetails,statistics",
sep = "&")
api_call <- paste0(base, "channels", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
# Process the raw data into a data frame
channel.json <- fromJSON(json_result, flatten = T)
channel.df <- as.data.frame(channel.json)
playlist_id <- channel.df$contentDetails.relatedPlaylists.uploads
# temporary variables
nextPageToken <- ""
upload.df <- NULL
pageInfo <- NULL
# Loop through the playlist while there is still a next page
while (!is.null(nextPageToken)) {
# Construct the API call
api_params <-
paste(paste0("key=", key),
paste0("playlistId=", playlist_id),
"part=snippet,contentDetails,status",
"maxResults=50",
sep = "&")
# Add the page token for page 2 onwards
if (nextPageToken != "") {
api_params <- paste0(api_params,
"&pageToken=",nextPageToken)
}
api_call <- paste0(base, "playlistItems", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
upload.json <- fromJSON(json_result, flatten = T)
nextPageToken <- upload.json$nextPageToken
pageInfo <- upload.json$pageInfo
curr.df <- as.data.frame(upload.json$items)
if (is.null(upload.df)) {
upload.df <- curr.df
} else {
upload.df <- bind_rows(upload.df, curr.df)
}
}
upload.df
install.packages(c("httr", "jsonlite", "dplyr", "curl", "kableExtra", "ggplot2", "plotly","reshape2"))
install.packages(c("httr", "jsonlite", "dplyr", "curl", "kableExtra", "ggplot2", "plotly", "reshape2"))
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(jsonlite)
library(dplyr)
library(curl)
library(ggplot2)
library(plotly)
library(reshape2)
data.frame(name = c("Rich Roll", "Andrew Huberman", "Tom Bilyeu"))
data.frame(name = c("Rich Roll", "Andrew Huberman", "Tom Bilyeu"),
cha_id = c("UCpjlh0e319ksmoOD7bQFSiw", "UC2D2CMWXMOVWx7giW1n3LIg", "UCnYMOamNKLGVlJgRUbamveA"))
API_key="AIzaSyBerKodKhkdaQ_udO--SBLEmwmCFXDuqa4"
getstats_video<-function(video_id,API_key){
url=paste0("https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics&id=",video_id,"&key=",API_key)
result <- fromJSON(txt=url)
salida=list()
return(data.frame(name=result$items$snippet$channelTitle, result$items$statistics,title=result$items$snippet$title,date=result$items$snippet$publishedAt,descrip=result$items$snippet$description))
}
getstats_video<-function(video_id,API_key){
url=paste0("https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics&id=",video_id,"&key=",
API_key)
result <- fromJSON(txt=url)
salida=list()
return(data.frame(name=result$items$snippet$channelTitle,
result$items$statistics,title=result$items$snippet$title,date=result$items$snippet$publ
shedAt,descrip=result$items$snippet$description))
getstats_video<-function(video_id,API_key){
url=paste0("https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics&id=",video_id,"&key=", API_key)
result <- fromJSON(txt=url)
salida=list()
return(data.frame(name=result$items$snippet$channelTitle,
result$items$statistics,title=result$items$snippet$title,date=result$items$snippet$publ
shedAt,descrip=result$items$snippet$description))
getstats_video<-function(video_id,API_key){
url=paste0("https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics&id=",video_id,"&key=",
API_key)
result <- fromJSON(txt=url)
salida=list()
return(data.frame(name=result$items$snippet$channelTitle,
result$items$statistics,title=result$items$snippet$title,
date=result$items$snippet$publishedAt,
descrip=result$items$snippet$description))
}
video_id
video_id <- data.frame(name = c("Rich Roll", "Andrew Huberman", "Tom Bilyeu"),
cha_id = c("UCpjlh0e319ksmoOD7bQFSiw", "UC2D2CMWXMOVWx7giW1n3LIg", "UCnYMOamNKLGVlJgRUbamveA"))
getstats_video<-function(video_id,API_key){
url=paste0("https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics&id=",video_id,"&key=",
API_key)
result <- fromJSON(txt=url)
salida=list()
return(data.frame(name=result$items$snippet$channelTitle,
result$items$statistics,title=result$items$snippet$title,
date=result$items$snippet$publishedAt,
descrip=result$items$snippet$description))
}
can_st=lapply(comp_data$cha_id,FUN = getstats_canal,API_key=API_key)
#install.packages(c("httr", "jsonlite", "dplyr", "curl", "kableExtra", "ggplot2", "plotly","reshape2"))
library(httr)
library(jsonlite)
library(dplyr)
library(curl)
library(ggplot2)
library(plotly)
library(reshape2)
#video_id?
data.frame(name = c("Rich Roll", "Andrew Huberman", "Tom Bilyeu"),
cha_id = c("UCpjlh0e319ksmoOD7bQFSiw", "UC2D2CMWXMOVWx7giW1n3LIg", "UCnYMOamNKLGVlJgRUbamveA"))
API_key="AIzaSyBerKodKhkdaQ_udO--SBLEmwmCFXDuqa4"
getstats_video<-function(video_id,API_key){
url=paste0("https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics&id=",video_id,"&key=",
API_key)
result <- fromJSON(txt=url)
salida=list()
return(data.frame(name=result$items$snippet$channelTitle,
result$items$statistics,title=result$items$snippet$title,
date=result$items$snippet$publishedAt,
descrip=result$items$snippet$description))
}
get_playlist_canal<-function(id,API_key,topn=15){
url=paste0('https://www.googleapis.com/youtube/v3/playlistItems?part=contentDetails&playlistId=',id,'&key=',API_key,'&maxResults=',topn)
result=fromJSON(txt=url)
return(data.frame(result$items$contentDetails))
}
getstats_canal<-function(id,API_key){
url=paste0('https://www.googleapis.com/youtube/v3/channels?part=snippet%2CcontentDetails%2Cstatistics&id=',id,'&key=',API_key)
result <- fromJSON(txt=url)
return(data.frame(name=result$items$snippet$title,result$items$statistics,pl_list_id=result$items$contentDetails$relatedPlaylists))
}
getall_channels<-function(ids,API_key,topn=5){
videos=lapply(ids,FUN=get_playlist_canal,API_key=API_key,topn=topn) %>% bind_rows()
stats=lapply(videos[,1],FUN=getstats_video,API_key=API_key)
stats=bind_rows(stats)
stats$vid_id=videos[,1]
return(stats)
}
can_st=lapply(comp_data$cha_id,FUN = getstats_canal,API_key=API_key)
comp_data <- data.frame(name = c("Rich Roll", "Andrew Huberman", "Tom Bilyeu"),
cha_id = c("UCpjlh0e319ksmoOD7bQFSiw",
"UC2D2CMWXMOVWx7giW1n3LIg",
"UCnYMOamNKLGVlJgRUbamveA"))
can_st=lapply(comp_data$cha_id,FUN = getstats_canal,API_key=API_key)
can_st=bind_rows(can_st)
can_st$viewCount=as.numeric(can_st$viewCount)
can_st[,1:6] %>% kable() %>%kable_styling()
library(kableExtra)
#install.packages(c("httr", "jsonlite", "dplyr", "curl", "kableExtra", "ggplot2", "plotly","reshape2"))
library(httr)
library(jsonlite)
library(dplyr)
library(curl)
library(ggplot2)
library(plotly)
library(reshape2)
library(kableExtra)
#video_id?
comp_data <- data.frame(name = c("Rich Roll", "Andrew Huberman", "Tom Bilyeu"),
cha_id = c("UCpjlh0e319ksmoOD7bQFSiw",
"UC2D2CMWXMOVWx7giW1n3LIg",
"UCnYMOamNKLGVlJgRUbamveA"))
API_key="AIzaSyBerKodKhkdaQ_udO--SBLEmwmCFXDuqa4"
getstats_video<-function(video_id,API_key){
url=paste0("https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics&id=",video_id,"&key=",
API_key)
result <- fromJSON(txt=url)
salida=list()
return(data.frame(name=result$items$snippet$channelTitle,
result$items$statistics,title=result$items$snippet$title,
date=result$items$snippet$publishedAt,
descrip=result$items$snippet$description))
}
get_playlist_canal<-function(id,API_key,topn=15){
url=paste0('https://www.googleapis.com/youtube/v3/playlistItems?part=contentDetails&playlistId=',id,'&key=',API_key,'&maxResults=',topn)
result=fromJSON(txt=url)
return(data.frame(result$items$contentDetails))
}
getstats_canal<-function(id,API_key){
url=paste0('https://www.googleapis.com/youtube/v3/channels?part=snippet%2CcontentDetails%2Cstatistics&id=',id,'&key=',API_key)
result <- fromJSON(txt=url)
return(data.frame(name=result$items$snippet$title,result$items$statistics,pl_list_id=result$items$contentDetails$relatedPlaylists))
}
getall_channels<-function(ids,API_key,topn=5){
videos=lapply(ids,FUN=get_playlist_canal,API_key=API_key,topn=topn) %>% bind_rows()
stats=lapply(videos[,1],FUN=getstats_video,API_key=API_key)
stats=bind_rows(stats)
stats$vid_id=videos[,1]
return(stats)
}
can_st=lapply(comp_data$cha_id,FUN = getstats_canal,API_key=API_key)
can_st=bind_rows(can_st)
can_st$viewCount=as.numeric(can_st$viewCount)
can_st[,1:6] %>% kable() %>%kable_styling()
can_st$viewCount=round(as.numeric(can_st$viewCount)/1000000,2)
p1=can_st %>% ggplot(aes(x=reorder(name,viewCount),y=viewCount,fill=name))+
geom_bar(stat="sum")+guides(size=F)+coord_flip()+scale_fill_manual(values = c("red", "darkblue", "yellow2"))+
geom_text(inherit.aes = T,aes(label=paste(viewCount,"M")),nudge_y =0,angle = 90)+
labs(x="Total Visualizations(Millions)",y="Visualizations",fill="")+
theme(legend.position = "top")+mytheme3
can_st$viewCount=round(as.numeric(can_st$viewCount)/1000000,2)
p1=can_st %>% ggplot(aes(x=reorder(name,viewCount),y=viewCount,fill=name))+
geom_bar(stat="sum")+guides(size=F)+coord_flip()+scale_fill_manual(values = c("red", "darkblue", "yellow2"))+
geom_text(inherit.aes = T,aes(label=paste(viewCount,"M")),nudge_y =0,angle = 90)+
labs(x="Total Visualizations(Millions)",y="Visualizations",fill="")+
theme(legend.position = "top")
ggplotly(p1,tooltip=c("name","viewCount"))  %>%
layout(legend = list(orientation = "h",x = 0.01, y = -0.1,autosize=F))
var_to_see="dislikeCount" #favoriteCount or commentCount
info=getall_channels(ids = can_st$pl_list_id.uploads,API_key = API_key,topn =20)
datacond=melt(info[,c(1:6,8)],id.vars = c("name","date"))
#install.packages(c("httr", "jsonlite", "dplyr", "curl", "kableExtra", "ggplot2", "plotly","reshape2", "tuber"))
install.packages("tuber")
library(tuber)
GET("https://www.googleapis.com/youtube/v3/channels?key=AIzaSyBerKodKhkdaQ_udO--SBLEmwmCFXDuqa4&id=UCxX9wt5FWQUAAz4UrysqK9A&part=snippet,contentDetails,statistics")
GET("https://www.googleapis.com/youtube/v3/channels?key=AIzaSyBerKodKhkdaQ_udO--SBLEmwmCFXDuqa4&id=UCpjlh0e319ksmoOD7bQFSiw&part=snippet,contentDetails,statistics")
key <- "AIzaSyBerKodKhkdaQ_udO--SBLEmwmCFXDuqa4"
channel_id <- "UCpjlh0e319ksmoOD7bQFSiw"  # CS Dojo Channel ID
user_id <- "@richroll"  # Rich Roll Username
base <- "https://www.googleapis.com/youtube/v3/"
paste(paste0("key=", key),
paste0("id=", channel_id),
"part=snippet,contentDetails,statistics",
sep = "&")
api_params <-
paste(paste0("key=", key),
paste0("id=", channel_id),
"part=snippet,contentDetails,statistics",
sep = "&")
<- paste0(base, "channels", "?", api_params)
paste0(base, "channels", "?", api_params)
api_call <- paste0(base, "channels", "?", api_params)
GET(api_call)
api_result <- GET(api_call)
content(api_result, "text", encoding="UTF-8")
json_result <- content(api_result, "text", encoding="UTF-8")
fromJSON(json_result, flatten = T)
channel.json <- fromJSON(json_result, flatten = T)
as.data.frame(channel.json)
channel.df <- as.data.frame(channel.json)
channel.df$items.statistics.viewCount
channel.df$contentDetails.relatedPlaylists.uploads
channel.df$items.contentDetails.relatedPlaylists.uploads
total_views <- channel.df$items.statistics.viewCount
playlist_id <- channel.df$items.contentDetails.relatedPlaylists.uploads
# temporary variables
nextPageToken <- ""
upload.df <- NULL
pageInfo <- NULL
# Loop through the playlist while there is still a next page
while (!is.null(nextPageToken)) {
# Construct the API call
api_params <-
paste(paste0("key=", key),
paste0("playlistId=", playlist_id),
"part=snippet,contentDetails,status",
"maxResults=50",
sep = "&")
# Add the page token for page 2 onwards
if (nextPageToken != "") {
api_params <- paste0(api_params,
"&pageToken=",nextPageToken)
}
api_call <- paste0(base, "playlistItems", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
upload.json <- fromJSON(json_result, flatten = T)
nextPageToken <- upload.json$nextPageToken
pageInfo <- upload.json$pageInfo
curr.df <- as.data.frame(upload.json$items)
if (is.null(upload.df)) {
upload.df <- curr.df
} else {
upload.df <- bind_rows(upload.df, curr.df)
}
}
paste0(base, "playlistItems", "?", api_params)
GET(api_call)
content(api_result, "text", encoding="UTF-8")
fromJSON(json_result, flatten = T)
# temporary variables
nextPageToken <- ""
upload.df <- NULL
pageInfo <- NULL
# Loop through the playlist while there is still a next page
while (!is.null(nextPageToken)) {
# Construct the API call
api_params <-
paste(paste0("key=", key),
paste0("playlistId=", playlist_id),
"part=snippet,contentDetails,status",
"maxResults=50",
sep = "&")
# Add the page token for page 2 onwards
if (nextPageToken != "") {
api_params <- paste0(api_params,
"&pageToken=",nextPageToken)
}
api_call <- paste0(base, "playlistItems", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
upload.json <- fromJSON(json_result, flatten = T)
nextPageToken <- upload.json$nextPageToken
pageInfo <- upload.json$pageInfo
curr.df <- as.data.frame(upload.json$items)
if (is.null(upload.df)) {
upload.df <- curr.df
} else {
upload.df <- bind_rows(upload.df, curr.df)
}
}
# temporary variables
nextPageToken <- ""
upload.df <- NULL
pageInfo <- NULL
# Loop through the playlist while there is still a next page
while (!is.null(nextPageToken)) {
# Construct the API call
api_params <-
paste(paste0("key=", key),
paste0("playlistId=", playlist_id),
"part=snippet,contentDetails,status",
"maxResults=50",
sep = "&")
# Add the page token for page 2 onwards
if (nextPageToken != "") {
api_params <- paste0(api_params,
"&pageToken=",nextPageToken)
}
api_call <- paste0(base, "playlistItems", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
upload.json <- fromJSON(json_result, flatten = T)
nextPageToken <- upload.json$nextPageToken
pageInfo <- upload.json$pageInfo
curr.df <- as.data.frame(upload.json$items)
if (is.null(upload.df)) {
upload.df <- curr.df
} else {
upload.df <- bind_rows(upload.df, curr.df)
}
}
video.df<- NULL
# Loop through all uploaded videos
for (i in 1:nrow(upload.df)) {
# Construct the API call
video_id <- upload.df$contentDetails.videoId[i]
api_params <-
paste(paste0("key=", key),
paste0("id=", video_id),
"part=id,statistics,contentDetails",
sep = "&")
api_call <- paste0(base, "videos", "?", api_params)
api_result <- GET(api_call)
json_result <- content(api_result, "text", encoding="UTF-8")
video.json <- fromJSON(json_result, flatten = T)
curr.df <- as.data.frame(video.json$items)
if (is.null(video.df)) {
video.df <- curr.df
} else {
video.df <- bind_rows(video.df, curr.df)
}
}
video.df$contentDetails.videoId <- video.df$id
video_final.df <- merge(x = upload.df,
y = video.df,
by = "contentDetails.videoId")
video.df$statistics.viewCount
head(video_final.df[c(1),])
head(video_final.df[,c(1)])
head(video_final.df[,c("snippet.title")])
head(video_final.df[,c("snippet.title", "contentDetails.duration")])
head(video_final.df[,c("snippet.channelTitle", "snippet.title", "contentDetails.duration", "statistics.viewCount", "statistics.likeCount")])
